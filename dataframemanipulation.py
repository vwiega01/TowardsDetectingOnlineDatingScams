# -*- coding: utf-8 -*-
"""DataFrameManipulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-J6-e3PG-vHfCJRBzqJJboBVvoHalj2Y

#Data Frame Manipulation
"""

# mounting to google drive
import google.colab
from google.colab import drive
drive.mount('/content/drive/')

"""##JSON files into DF
[Stack Overflow](https://stackoverflow.com/questions/30539679/python-read-several-json-files-from-a-folder)

### Real Profiles: 9884 rows
"""

# code from Stack OverFlow
import os 
import glob
import pandas as pd

path_to_json = r'/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/real'
# import all files from folder which ends with .json 
json_files = glob.glob(os.path.join(path_to_json, '*.json'))

# convert all files to dataframe
real_profiles = pd.concat((pd.read_json(f) for f in json_files))

# remove image file path
del real_profiles['images']
print(real_profiles.head())
print(real_profiles.info())

print("Number of Rows: " + str(len(real_profiles.index)))

real_profiles.head()

real_profiles_copy = real_profiles.copy()
real_profiles_copy.to_excel(r'/content/drive/MyDrive/VURF/Google_Collabs/real_profiles_excel.xlsx', header=True)

"""### Scam Profiles: 4233 rows
[Conversion Tutorial](https://towardsdatascience.com/how-to-convert-json-into-a-pandas-dataframe-100b2ae1e0d8)

1) Remove the images column from all JSON files --> COMPLETED
"""

# ***** TESTING LOOP *****
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
test_json_path = '/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam/abdul-rahmaan-abdulrahamaan956gmail-com.json'

# test out opening and changing JSON file data
with open(test_json_path, encoding='utf-8', mode='r') as data_file:
  print(test_json_path)
  data_test = json.load(data_file)
  print(data_test)
  if 'images' in data_test:
    del data_test['images']
    print('deleted images')
  for element in data_test:
    print(element)
  print(data_test)

# uploading the JSON file changes
with open(test_json_path, 'w') as data_file:
    data_test = json.dump(data_test, data_file)
    print('complete')

# ****** FINAL TEST ******
import pandas as pd
import json
import glob
import os

# set up file path and directory
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam_TEST')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam_TEST')

# loops through folder to access JSON files
for file in file_names:
    # open and retrieve data from json files
    with open(file, encoding='utf-8', mode='r') as currentFile:
        print(file)
        data = json.load(currentFile)  # Parses the file to json object
        if 'images' in data: # if images column exists, it will be deleted
          del data['images']
          print('deleted images')

    # uploads data variable to the file to complete the removal of the images column
    with open(file, 'w') as data_file:
      data_dump = json.dump(data, data_file)
      print('completed upload: ' + file)

# **** running on whole data set ****
from typing import Set
import pandas as pd
import json
import glob
import os

# set up file path and directory
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')

# loops through folder to access JSON files
for file in file_names:
    # open and retrieve data from json files
    with open(file, encoding='utf-8', mode='r') as currentFile:
        print(file)
        data = json.load(currentFile)  # Parses the file to json object
        if 'images' in data: # if images column exists, it will be deleted
          del data['images']
          print('deleted images')

    # uploads data variable to the file to complete the removal of the images column
    with open(file, 'w') as data_file:
      data_dump = json.dump(data, data_file)
      print('completed upload: ' + file)

"""2) Get information on the tags of the JSON profiles

"""

from typing import Set
import pandas as pd
import json
import glob
import os

# create set of all profile tags
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
keywordTags = set()

for file in file_names:
    with open(file, encoding='utf-8', mode='r') as currentFile:
        data = json.load(currentFile)  # Parses the file to json object
        for tag in data['tags']: # loops through tags array of each json object
          keywordTags.add(tag)
#print(keywordTags)

# create dictionary to hold frequencies of keywordTags set
dict_tags = {}
for word in keywordTags:
  dict_tags[word] = 0
#print(dict_tags)

for file in file_names:
    with open(file, encoding='utf-8', mode='r') as currentFile:
        data = json.load(currentFile)  # Parses the file to json object
        for tag in data['tags']:
          dict_tags[tag] += 1
print(dict_tags)

# remove tags with frequencies less than 5
test_removal = {}
for key, value in dict_tags.items():
  if(value > 5):
    test_removal[key] = value
print(test_removal)
dict_tags = test_removal

# view highest frequency tags
sorted_list = sorted(dict_tags.items(), key=lambda x: x[1])    
print(sorted_list)

import pandas as pd
import json
import os

# figure out max number of tags
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
max = 0

for file in file_names:
  # create data frame 
  json_df = pd.read_json(file)
  if (len(json_df) > max): # length works bc each tag is a new row in json_df
    max = len(json_df)

print('max number of tags: ' + str(max))
# *** largest number of tags is 9

"""3) Put the JSON files into a data frame"""

from contextlib import nullcontext
# **** TESTING ****
import pandas as pd
import os

# TRY 1: test out pandas concatenation
json1 = pd.read_json('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam/abigail-asante-abigailasante25gmail-com.json')
json2 = pd.read_json('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam/abdul-rahmaan-abdulrahamaan956gmail-com.json')
combo = pd.concat([json1, json2])
#print(combo)

# TRY 2: create pandas data frame for each json
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam_TEST')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam_TEST')
for file in file_names:
  jsony = pd.read_json(file)
  #print('pd:')
  #print(jsony)
  #print('\n')

# TRY 3: test out a couple json files with the shortened loop
scam_profiles_TEST = pd.concat(pd.read_json(file) for file in file_names)
#print('concat pd test:')
#print(scam_profiles_TEST)

# TRY 4: test out split method
split_test = "victoria-wiegand-gmail"
s = split_test.split('-')
#print(s)
#print(type(s))
first_last = s[0] + ' ' + s[1]
#print(first_last)
#print(type(first_last))
#print(s[2])

# TRY 5: test concatenating with an empty data frame
df = pd.DataFrame()
df = pd.concat([df, json2])
#print(df)

# TRY 6: test adding tag columns
print('json1:')
print(json1)
print('***************************************************************')

for i in range(1,10):
  json1[('tag' + str(i))] = None

tag_index = 1 #start at tag1
for tag in json1['tags']:
  json1[('tag' + str(tag_index))] = tag
  tag_index += 1

print('json1 with tags:')
print(json1)

# TRY 7: shorten JSON data frame to one row
print('***************************************************************')
print('single row df: ')
json1 = json1.drop(1)
json1 = json1.drop(2)
print(json1)

print('json2:')
for i in range(1, len(json2)):
  json2 = json2.drop(i)
  print(i)
print(json2)

# TRY 8: delete json columns
json2 = json2.drop(columns='tags')
print('json2: COLUMN DELTETION TEST')
print(json2)

"""POTENTIAL SOLUTIONS: 
1.   separate the file path string at every '-' then concatentate the first two for name to get first name, last name, and email
2.   create separate columns for first name and last name, including making all names lowercase
3.   save the data frame as a csv each time the data frame is manipulated to allow for easy access of the data frame







"""

# **** FINAL TEST ****
# declare data frame
scam_profiles_TEST = pd.DataFrame()

# !!! not an effecive method bc not all json files have the same file name structure
# function to get profile name from file path
def get_profile_name(file_path):
    name_list = file_path.split('-')
    return name_list[0] + ' ' + name_list[1]

def get_profile_email(file_path):
    name_list = file_path.split('-')
    return name_list[2]
 
# loop through JSON scam folder
for file in file_names:
  # create data frame for JSON file
  json_df = pd.read_json(file)

  # add file path for information
  json_df['file_path'] = file

  # add tag columns (max # of tags = 9)
  for i in range(1,10): # initalize all tag columns to null
    json_df[('tag' + str(i))] = None
  tag_index = 1 #start at tag1
  for tag in json_df['tags']: # loop through tags and assign to new tag columns
    json_df[('tag' + str(tag_index))] = tag
    tag_index += 1
  json_df = json_df.drop(columns='tags') # delete 'tags' column

  # shorten JSON data frame to only 1st row
  for i in range(1, len(json_df)):
    json_df = json_df.drop(i) # at index i of the data frame
  print('json: ' + file)
  print(json_df)
  
  # add current json file to entire data frame
  scam_profiles_TEST = pd.concat([scam_profiles_TEST, json_df])

# change column order for better visibility
print('changed columns:')
scam_profiles_TEST = scam_profiles_TEST[['name', 'username','email', 'age', 'gender', 
                                         'ethnicity', 'location', 'occupation', 'status', 
                                         'tag1', 'tag2', 'tag3', 'tag4', 'tag5', 'tag6',
                                         'tag7', 'tag8', 'tag9', 'month_reported', 
                                         'year_reported' , 'inet' , 'file_path']]
print(scam_profiles_TEST)
print(scam_profiles_TEST.columns)

# ***** running on whole data set *****
import os
import pandas as pd

# establish file path to folder
os.chdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')
file_names = os.listdir('/content/drive/MyDrive/VURF/Google_Collabs/JSON_files/scam')

# declare data frame
scam_profiles = pd.DataFrame()

# loop through JSON scam folder
for file in file_names:
  # create data frame for JSON file
  json_df = pd.read_json(file)

  # add file path for information
  json_df['file_path'] = file

  # add tag columns (max # of tags = 9)
  for i in range(1,10): # initalize all tag columns to null
    json_df[('tag' + str(i))] = None
  tag_index = 1 #start at tag1
  for tag in json_df['tags']: # loop through tags and assign to new tag columns
    json_df[('tag' + str(tag_index))] = tag
    tag_index += 1
  json_df = json_df.drop(columns='tags') # delete 'tags' column

  # shorten JSON data frame to only 1st row
  for i in range(1, len(json_df)): # at index i of the data frame
    json_df = json_df.drop(i)
  
  # add current json file to entire data frame
  scam_profiles = pd.concat([scam_profiles, json_df])

print('COMPLETED SCAM DATA FRAME:')
scam_profiles = scam_profiles.reset_index()
print(scam_profiles.head())

print(scam_profiles.columns)

# CLEANING UP THE DATA FRAME
# delete index column
scam_profiles = scam_profiles.drop(columns='index')

# change column order for better visibility
scam_profiles = scam_profiles[['name', 'username', 'age', 'gender', 'email', 
                               'phone', 'ethnicity', 'location', 'occupation', 
                               'status', 'tag1', 'tag2', 'tag3', 'tag4', 'tag5', 
                               'tag6', 'tag7', 'tag8', 'tag9', 'description', 
                               'month_reported', 'year_reported' , 'inet' , 
                               'file_path']]

print('CLEANED SCAM DATA FRAME: ' + str(len(scam_profiles)) + " rows")
print(scam_profiles.head(10))

# add scam column and set it to 1
scam_profiles['scam'] = 1
print(scam_profiles.head())

"""4) Sending Data Frame to be stored in Excel File"""

scam_profiles.head()

scam_profiles_copy = scam_profiles.copy()
scam_profiles_copy.to_excel(r'/content/drive/MyDrive/VURF/Google_Collabs/scam_profiles_excel.xlsx', header=True)